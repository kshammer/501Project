My algorithm is a first fit algorithm. What that means is the code will iterate over all the nodes
and for each node it will check its neighbors and then take the smallest color that is available. If
no colors are available it will add another. 

50 nodes Largest degree = 28 Colors used = 6
100 nodes Largest degree = 26 Colors used = 5
200 nodes Largest degree = 24 Colors used = 6
300 nodes Largest degree = 24 Colors used = 6
400 nodes Largest degree = 30 Colors used = 6
500 nodes Largest degree = 32 Colors used = 7

Performance of my code on graphs of varying degree seems pretty uniform.
It doesn't seem like the number of nodes effects the number of colors used. It makes more sense to compare
graphs of different largest degrees then checking how many colors are used. Based on my algorithm it will only struggle
if there are multiple high degree nodes connected to each other. Due to the greediness of my algorithm my code runs extremely fast
with a big O (n^2). I suspect that the amortized cost would be much lower as not every node in the graph will have a high degree. For my own 
curiosity I ran the program on a graph of 1000 nodes and 100000 edges. It run within seconds and used only 54 colors. 


Sudoku graph
____________________________
5  7  1 | 2  6  3 | 10 8  4 |
4  2  3 | 1  8  7 | 9  5  6 |
9  8  6 | 4  5  10| 3  2  1 |
-----------------------------
1  6  5 | 3  4  2 | 7  9  8 | 
3  4  7 | 9  10 1 | 2  6  5 |
2  9  8 | 5  7  6 | 1  3  10|
----------------------------- 
8  5  4 | 7  3  9 | 6  1  2 |
6  1  2 | 10 11 5 | 8  4  3 |
7  3  9 | 6  1  4 | 5 10  11|
----------------------------- 

Program output 
2
5 7 1 2 6 3 10 8 4 4 2 3 1 8 7 9 5 6 9 8 6 4 5 10 3 2 1 1 6 5 3 4 2 7 9 8 3 4 7 9 10 1 2 6 5 2 9 8 5 7 6 1 3 10 8 5 4 7 3 9 6 1 2 6 1 2 10 11 5 8 4 3 7 3 9 6 1 4 5 10 11 